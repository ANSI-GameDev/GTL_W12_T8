# main 브랜치에 합치기 전 PR에 대해 빌드 테스트를 수행하는 GitHub Actions 워크플로우입니다.
# 이 워크플로우는 PR이 생성되거나 업데이트될 때마다 자동으로 실행됩니다.
name: Pull Request Build Test

on:
  pull_request:
    branches:
      - main  # main 브랜치에 대한 PR만 트리거
  workflow_dispatch: # 수동으로 트리거할 수 있도록 설정

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./EngineSIU/EngineSIU.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    # 1. 레포지토리 체크아웃
    - uses: actions/checkout@v4
      with:
        lfs: true # Git LFS 파일들을 가져오도록 설정

    # 2. MSBuild Setup
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    # NuGet 사용 안하기 때문에 주석 처리
    # - name: Restore NuGet packages
    #   working-directory: ${{ github.workspace }}
    #   run: nuget restore ${{ env.SOLUTION_FILE_PATH }}

    # 3. MSBuild 중간 파일 캐싱
    # - name: Cache MSBuild intermediate files
    #   uses: actions/cache@v4
    #   with:
    #     path: build/
    #     key: ${{ runner.os }}-msbuild-${{ hashFiles('**/*.sln', '**/*.vcxproj') }}
    #     restore-keys: |
    #       ${{ runner.os }}-msbuild-

    - name: Build
      working-directory: ${{ github.workspace }}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{ env.BUILD_CONFIGURATION }} ${{ env.SOLUTION_FILE_PATH }}
